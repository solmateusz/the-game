{"version":3,"sources":["palette/colors.tsx","components/GameField.tsx","navigation/Routes.tsx","components/PageFrame.tsx","redux/hooks.ts","redux/scoresSlice.tsx","redux/userSlice.tsx","pages/Game.tsx","components/Button.tsx","pages/Score.tsx","components/Input.tsx","pages/Start.tsx","navigation/RouterConfig.tsx","App.tsx","reportWebVitals.ts","redux/store.tsx","index.tsx"],"names":["colors","GameField","memo","props","timeoutId","size","onActiveCellClick","timeoutMs","useState","getRandomCellNumber","activeCell","setActiveCell","cellArray","Array","i","length","getVisibleCell","visible","id","Cell","style","visibility","onClick","clearTimeout","useEffect","setTimeout","Field","map","c","arraySize","current","result","Math","floor","random","Routes","styled","div","PageFrame","ContainerDiv","ContentDiv","children","useAppDispatch","useDispatch","useAppSelector","useSelector","scoresSlice","createSlice","name","initialState","reducers","upsertScore","state","action","payload","nickname","score","element","find","e","push","addScore","actions","selectAllScores","scores","scoresReducer","reducer","lastScore","undefined","userSlice","setNickname","setLastScore","selectNickname","user","selectLastScore","userReducer","Game","setScore","remainingTime","setRemainingTime","history","useHistory","dispatch","Start","intervalId","setInterval","prevValue","clearInterval","Score","Wrapper","Header","preScore","Time","Button","button","sort","a","b","slice","DivWithMargin","TableWrapper","Tabel","s","table","Input","input","nicknameField","error","setError","onSubmit","preventDefault","currentTarget","elements","value","htmlFor","defaultValue","placeholder","type","RouterConfig","location","useLocation","TransitionGroup","className","CSSTransition","classNames","timeout","exact","path","component","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17387271.chunk.js","sourcesContent":["export const colors = {\r\n    primary: \"#FF7600\",\r\n    secondary: \"#FFA900\",\r\n    background: \"#52006A\",\r\n    attention: \"#CD113B\"\r\n}","import { colors } from \"palette/colors\";\r\nimport { memo, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface GameFieldProps {\r\n  size: number;\r\n  onActiveCellClick: () => void;\r\n  timeoutMs: number;\r\n}\r\n\r\nexport const GameField = memo(\r\n  (props: GameFieldProps) => {\r\n    let timeoutId: any;\r\n    const { size, onActiveCellClick, timeoutMs } = props;\r\n\r\n    const [activeCell, setActiveCell] = useState<number>(\r\n      getRandomCellNumber(size, -1)\r\n    );\r\n\r\n    const cellArray = Array<boolean>(size);\r\n    for (let i = 0; i < cellArray.length; i++) {\r\n      cellArray[i] = false;\r\n    }\r\n\r\n    cellArray[activeCell] = true;\r\n\r\n    const handleCellClick = () => {\r\n      clearTimeout(timeoutId);\r\n      onActiveCellClick();\r\n      setActiveCell(getRandomCellNumber(size, activeCell));\r\n    };\r\n\r\n    const getVisibleCell = (visible: boolean, id: number) => (\r\n      <Cell key={id}\r\n        style={{\r\n          visibility: visible ? \"visible\" : \"hidden\",\r\n        }}\r\n        onClick={() => (visible ? handleCellClick() : null)}\r\n      ></Cell>\r\n    );\r\n\r\n    useEffect(() => {\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      timeoutId = setTimeout(\r\n        () => setActiveCell(getRandomCellNumber(size, activeCell)),\r\n        timeoutMs\r\n      );\r\n\r\n      return () => clearTimeout(timeoutId);\r\n    });\r\n\r\n    return (\r\n        <Field>\r\n          {cellArray.map((c, id) => getVisibleCell(c, id))}\r\n        </Field>\r\n    );\r\n  },\r\n  () => true\r\n);\r\n\r\nfunction getRandomCellNumber(arraySize: number, current: number) {\r\n  let result = current;\r\n  while (result === current) {\r\n    result = Math.floor(Math.random() * arraySize);\r\n  }\r\n  return result;\r\n}\r\n\r\nconst Field = styled.div`\r\n  display: grid;\r\n  justify-content: space-evenly;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  background: white;\r\n  border-radius: 1rem;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cell = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-bottom: 1rem;\r\n  border-radius: 1rem;\r\n  background-color: ${() => colors.secondary};\r\n`;\r\n","export enum Routes {\r\n    Start = \"/\",\r\n    Game = \"/game\",\r\n    Score = \"/score\"\r\n}","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const PageFrame: React.FC = (props) => {\r\n  return (\r\n    <ContainerDiv>\r\n      <ContentDiv>{props.children}</ContentDiv>\r\n    </ContainerDiv>\r\n  );\r\n};\r\n\r\nconst ContainerDiv = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  height: 100%;\r\n  align-items: center;\r\n  position: absolute; \r\n  top: 0;\r\n`;\r\n\r\nconst ContentDiv = styled.div`\r\n  max-width: 40rem;\r\n  width: 40rem;\r\n  background: #52006a;\r\n  color: #ff7600;\r\n  padding: 2rem;\r\n  height: 85%;\r\n  border-radius: 1rem;\r\n  display: grid;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  grid-template-columns: 1fr;\r\n  text-align: center;\r\n  box-shadow: rgba(17, 17, 26, 0.2) 0px 2px 24px,\r\n    rgba(17, 17, 26, 0.2) 0px 2px 56px, rgba(17, 17, 26, 0.4) 0px 2px 80px;\r\n`;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"./store\";\r\n\r\nexport interface ScoreRecord {\r\n  nickname: string;\r\n  score: number;\r\n}\r\n\r\nconst initialState: ScoreRecord[] = [];\r\n\r\nconst scoresSlice = createSlice({\r\n  name: \"scores\",\r\n  initialState,\r\n  reducers: {\r\n    upsertScore: (state, action: PayloadAction<ScoreRecord>) => {\r\n      const { nickname, score } = action.payload;\r\n      const element = state.find(e => e.nickname === nickname);\r\n      if (element) {\r\n        element.score = score > element.score ? score : element.score;\r\n      } else {\r\n        state.push(action.payload);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { upsertScore: addScore } = scoresSlice.actions;\r\n\r\nexport const selectAllScores = (state: RootState) => state.scores;\r\n\r\nexport const scoresReducer = scoresSlice.reducer;\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"./store\";\r\n\r\nexport interface UserInfo {\r\n  nickname: string;\r\n  lastScore: number | undefined;\r\n}\r\n\r\nconst initialState: UserInfo = { nickname: \"\", lastScore: undefined };\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState,\r\n  reducers: {\r\n    setNickname: (state, action: PayloadAction<string>) => {\r\n      state.nickname = action.payload;\r\n    },\r\n    setLastScore: (state, action: PayloadAction<number>) => {\r\n      state.lastScore = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setNickname, setLastScore } = userSlice.actions;\r\n\r\nexport const selectNickname = (state: RootState) => state.user.nickname;\r\n\r\nexport const selectLastScore = (state: RootState) => state.user.lastScore;\r\n\r\nexport const userReducer = userSlice.reducer;\r\n","import { GameField } from \"components/GameField\";\r\nimport { PageFrame } from \"components/PageFrame\";\r\nimport { Routes } from \"navigation/Routes\";\r\nimport { memo, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport { addScore } from \"redux/scoresSlice\";\r\nimport { selectNickname, setLastScore } from \"redux/userSlice\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Game = memo(\r\n  () => {\r\n    const gameDurationSec = 30;\r\n    const cellChangeIntervalMs = 700;\r\n    const fieldSize = 16;\r\n\r\n    const [score, setScore] = useState<number>(0);\r\n    const [remainingTime, setRemainingTime] = useState<number>(gameDurationSec);\r\n\r\n    const history = useHistory();\r\n    const dispatch = useAppDispatch();\r\n    const nickname = useAppSelector(selectNickname);\r\n\r\n    useEffect(() => {\r\n      if (!nickname) {\r\n        history.push(Routes.Start);\r\n      }\r\n\r\n      const intervalId = setInterval(\r\n        () => setRemainingTime((prevValue) => prevValue - 1),\r\n        1000\r\n      );\r\n\r\n      return () => clearInterval(intervalId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      if (remainingTime === 0) {\r\n        dispatch(addScore({ nickname, score }));\r\n        dispatch(setLastScore(score));\r\n        history.push(Routes.Score);\r\n      }\r\n    });\r\n\r\n    return (\r\n      <PageFrame>\r\n        <Wrapper>\r\n          <Header>Hit as many rectangles as possible!</Header>\r\n          <GameField\r\n            size={fieldSize}\r\n            onActiveCellClick={() => {\r\n              setScore((preScore) => preScore + 1);\r\n            }}\r\n            timeoutMs={cellChangeIntervalMs}\r\n          />\r\n          <Score>Score: {score}</Score>\r\n          <Time>Time remaining: {remainingTime}</Time>\r\n        </Wrapper>\r\n      </PageFrame>\r\n    );\r\n  },\r\n  () => true\r\n);\r\n\r\nconst Header = styled.div`\r\n  position: absolute;\r\n  top: -1.5rem;\r\n  text-align: center;\r\n  width: 100%;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  height: 100%;\r\n  position: relative;\r\n`;\r\n\r\nconst Score = styled.div`\r\n  float: left;\r\n  margin-top: 0.3rem;\r\n`;\r\n\r\nconst Time = styled.div`\r\n  float: right;\r\n  margin-top: 0.3rem;\r\n`;\r\n","import { colors } from \"palette/colors\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Button = styled.button`\r\n    width: 100%;\r\n    height: 3rem;\r\n    margin-top: 1rem;\r\n    border-radius: 1rem;\r\n    outline: none;\r\n    border: none;\r\n    background-color: ${() => colors.primary};\r\n    cursor: pointer;\r\n    color: ${() => colors.background};\r\n\r\n    &:hover {\r\n        background-color: ${() => colors.secondary};\r\n    }\r\n`;","import { Button } from \"components/Button\";\r\nimport { PageFrame } from \"components/PageFrame\";\r\nimport { Routes } from \"navigation/Routes\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAppSelector } from \"redux/hooks\";\r\nimport { selectAllScores } from \"redux/scoresSlice\";\r\nimport { selectLastScore, selectNickname } from \"redux/userSlice\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Score = () => {\r\n  const history = useHistory();\r\n  let scores = [...useAppSelector(selectAllScores)]\r\n    .sort((a, b) => (a.score > b.score ? -1 : a.score < b.score ? 1 : 0))\r\n    .slice(0, 10);\r\n\r\n  const lastScore = useAppSelector(selectLastScore);\r\n  const nickname = useAppSelector(selectNickname);\r\n\r\n  return (\r\n    <PageFrame>\r\n      <div>\r\n        <Button onClick={() => history.push(Routes.Start)}>\r\n          Back to Start Page\r\n        </Button>\r\n        {nickname && (\r\n          <Button onClick={() => history.push(Routes.Game)}>Try Again</Button>\r\n        )}\r\n        {lastScore !== undefined && (\r\n          <DivWithMargin>\r\n            {nickname}, your last score: {lastScore}\r\n          </DivWithMargin>\r\n        )}\r\n        <DivWithMargin>Top 10 scores:</DivWithMargin>\r\n        <TableWrapper>\r\n          <Tabel>\r\n            <thead>\r\n              <tr>\r\n                <th>Position</th>\r\n                <th>Nickname</th>\r\n                <th>Score</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {scores.map((s, id) => (\r\n                <tr key={id}>\r\n                  <td>{id + 1}</td>\r\n                  <td>{s.nickname}</td>\r\n                  <td>{s.score}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Tabel>\r\n        </TableWrapper>\r\n      </div>\r\n    </PageFrame>\r\n  );\r\n};\r\n\r\nconst DivWithMargin = styled.div`\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst TableWrapper = styled.div`\r\n  width: \"100%\";\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 1rem;\r\n`;\r\n\r\nconst Tabel = styled.table`\r\n  width: 70%;\r\n`;\r\n","import { colors } from \"palette/colors\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Input = styled.input`\r\n    width: 98%;\r\n    height: 3rem;\r\n    color: ${() => colors.background};\r\n    text-align: center;\r\n    font-weight: 600;\r\n    border-radius: 1rem;\r\n    margin-top: 1rem;\r\n\r\n    &:focus {\r\n        outline: none;\r\n        background-color: ${() => colors.secondary};\r\n    }\r\n`;","import { Button } from \"components/Button\";\r\nimport { Input } from \"components/Input\";\r\nimport { PageFrame } from \"components/PageFrame\";\r\nimport { Routes } from \"navigation/Routes\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport { selectNickname, setNickname } from \"redux/userSlice\";\r\n\r\ninterface FormElements extends HTMLFormControlsCollection {\r\n  nickname: HTMLInputElement;\r\n}\r\n\r\ninterface FormElement extends HTMLFormElement {\r\n  readonly elements: FormElements;\r\n}\r\n\r\nexport const Start = () => {\r\n  const nicknameField = \"nickname\";\r\n  const dispatch = useAppDispatch();\r\n  const nickname = useAppSelector(selectNickname);\r\n  const [error, setError] = useState<string>();\r\n\r\n  const history = useHistory();\r\n\r\n  const onStartGameClick = (e: React.FormEvent<FormElement>) => {\r\n    e.preventDefault();\r\n    const nickname = e.currentTarget.elements.nickname.value;\r\n\r\n    if (!nickname) {\r\n      setError(\"Please enter nickname here!\");\r\n      return;\r\n    }\r\n\r\n    dispatch(setNickname(nickname));\r\n    history.push(Routes.Game);\r\n  };\r\n\r\n  return (\r\n    <PageFrame>\r\n      <label><h1>Welcome to The Game</h1></label>\r\n      <form onSubmit={onStartGameClick}>\r\n        <label htmlFor={nicknameField}>Please enter nickname:</label>\r\n        <Input id={nicknameField} defaultValue={nickname} placeholder={error} />\r\n        <Button type=\"submit\">Start Game</Button>\r\n        <Button type=\"button\" onClick={() => history.push(Routes.Score)}>\r\n          Show High Scores\r\n        </Button>\r\n      </form>\r\n    </PageFrame>\r\n  );\r\n};\r\n","import { Game } from \"pages/Game\";\r\nimport { Score } from \"pages/Score\";\r\nimport { Start } from \"pages/Start\";\r\nimport { Routes } from \"./Routes\";\r\nimport { Switch, Route, useLocation } from \"react-router-dom\";\r\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\r\n\r\nexport const RouterConfig = () => {\r\n  let location = useLocation();\r\n  return (\r\n    <TransitionGroup className=\"page-transition-group\">\r\n      <CSSTransition key={location.key} classNames=\"page-frame\" timeout={800} >\r\n        <Switch location={location}>\r\n          <Route exact path={Routes.Start} component={Start} />\r\n          <Route exact path={Routes.Game} component={Game} />\r\n          <Route exact path={Routes.Score} component={Score} />\r\n        </Switch>\r\n      </CSSTransition>\r\n    </TransitionGroup>\r\n  );\r\n};\r\n","import \"./App.css\";\r\nimport { RouterConfig } from \"navigation/RouterConfig\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n        <RouterConfig />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { scoresReducer } from \"./scoresSlice\";\r\nimport { userReducer } from \"./userSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    scores: scoresReducer,\r\n    user: userReducer\r\n  },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from 'redux/store';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}